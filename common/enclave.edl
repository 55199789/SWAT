/*
 * Copyright (C) 2011-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and bucketary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in bucketary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

// ocall for untrusted functions 
enclave {
    from "sgx_tstdc.edl" import *;
    from "sgx_tswitchless.edl" import *;
    untrusted {
        void ocall_print_string([in, string] const char *str) transition_using_threads;
        int ocall_close(int fd);
        void ocall_get_current_time([out] uint64_t *p_current_time) transition_using_threads;
        void ocall_resizeMemoryPool([out] uint8_t** ptr, uint32_t poolIndex, size_t size) transition_using_threads;

        void ocall_getBucketData([in, count=rCnt] const uint32_t* replicaCnts, size_t rCnt, 
                [in, count=bCnt] const uint32_t* bucketCnts, size_t bCnt,
                [out] uint8_t** encBucket, 
                uint32_t bucketSize) transition_using_threads;
        void ocall_insertBuckets(uint8_t lvl, uint32_t encBucketSize, 
                [user_check] const uint8_t* individualEncBuckets,
                [user_check] const uint8_t* i_j, size_t size_) transition_using_threads;
        void ocall_getBuckets([in, size=size_] uint8_t* bucketIDs_, size_t size_, 
                [out] uint8_t** encBuckets, uint32_t encBucketSize, 
                [in, out] uint32_t *bucketCnt) transition_using_threads;
        void ocall_delete([user_check]void *addr) transition_using_threads;

        void ocall_setSeed(uint32_t seed);
        void ocall_timing(uint8_t start, [in, string] const char* msg) transition_using_threads;
    };
};
